# Senior Seminar Project 
# Catherine Magee, Taylor Ratliff, Deion Locklear 
# Purpose: A combination of all the scripts we were provided with originally created by Colin Welsh. 

import os

##ZDOCK FIX (zdock to chimera & zdock to rosie)
### Purpose: Removes information from each line that prevents .pdb file from being opened in Chimera
### Parameters: filePrefixAntigen, the the name of the antigen;
###             filePrefixCap, the name of the cap
### Returns: outNames, a list of the outputted .pdb files that are compatible with Chimera
def zdock_to_chimera(filePrefixAntigen, filePrefixCap):
    cnt = 1
    fileNames = []
    outNames = []
    for i in range(1,11,1):
        name = "complex." + str(i) + ".pdb"
        fileNames.append(name)
    for obj in fileNames:
        infile = open(obj, 'r')
        outName = "zdock_" + filePrefixAntigen + "_" + filePrefixCap + "_complex" + str(cnt) + ".pdb"
        outNames.append(outName)
        outfile = open(outName, 'w')
        cnt += 1
        for line in infile:
            line = line.rstrip('\n')
            info = line[0:55]
            outfile.write(info)
            outfile.write('\n')
        infile.close()
        outfile.close()
    return outNames


### Purpose: Creates the file directory in which proteins.pdb files are placed
### Parameters: dirList, the list of directories to create
### Returns: None
def make_dir(dirList):
    cnt = 0
    for obj in dirList:
        os.makedirs(dirList[cnt])
        cnt += 1


### Purpose: Creates the list of directories to be created for the proteins.pdb files
### Parameters: fileRoot, the location of zdock_fix.py;
###             fileNames, the list of Chimera-compatible .pdb files;
###             antiName, the name of the Antigen
###             capName, the name of the protein cap;
### Returns: dirList, the list of directories to be created
def make_dir_list(fileRoot, fileNames, antiName, capName):
    dirList = []
    cnt = 0
    newFolder = antiName + '_' + capName + '_ROSIE_files'
    for obj in fileNames:
        newDir = os.path.join(fileRoot,newFolder,fileNames[cnt].rstrip('.pdb'))
        dirList.append(newDir)
        cnt += 1
    return dirList


### Purpose: Converts Chimera-ready .pdb files into the appropriate format for ROSIE
### Parameters: dirList, the list of the directories to place proteins.pdb files in
###             fileNames, list of files to be converted into the appropriate ROSIE format
### Returns: None
def convert_to_rosie(dirList,fileNames):
    cnt = 0
    for obj in fileNames:
        infile = open(fileNames[cnt],'r')
        outName = os.path.join(dirList[cnt],'proteins.pdb')
        outfile = open(outName,'w')
        prevNum = 0
        for line in infile:
            line = line.rstrip('\n')
            num = line[23:26]
            num = int(num.lstrip('  '))
            if num < prevNum:
                outfile.write('TER\n')
            if line.startswith('ATOM'):
                if line[21] != 'A' and line[21] != 'C':
                    outfile.write(line[:21])
                    outfile.write('C')
                    outfile.write(line[22:])
                    outfile.write('\n')
                else:
                    outfile.write(line[:55])
                    outfile.write('\n')
                
            elif line.startswith('TER'):
                outfile.write(line[:2])
                outfile.write('\n')
            elif line.startswith('ENDMDL'):
                outfile.write('TER\n')
            prevNum = num
        outfile.write('END')
        infile.close()
        outfile.close()
        cnt += 1
def find_files(fileNames,fileRoot):
    fileDirs = {}
    for dirname,subdir,file in os.walk(fileRoot):
        for name in file:
            if name in fileNames:
                fileDirs[name] = os.path.join(dirname,name)
    return fileDirs

def read_file_list(infile):
    fileNames = []
    for line in infile:
        line = line.rstrip('\n')
        fileNames.append(line)
    return fileNames

def batch_processing():
    fileRoot = os.getcwd()
    print("1: Enter filenames individually\n2: Enter filenames in a single .txt file\n3: Exit")
    batchOption = int(input('Enter choice: '))
    cont = False
    if batchOption == 1:
        fileNames = []
        print('Enter a filename. Enter "0" to exit.')
        filename = input('Enter filename: ')
        while filename != '0':
            fileNames.append(filename)
            filename = input('Enter filename: ')
            cont = True
    elif batchOption == 2:
        fileListName = input('Enter batch list file: ')
        fileList = open(fileListName, 'r')
        fileNames = read_file_list(fileList)
        cont = True
    if cont == True:
        fileDirs = find_files(fileNames,fileRoot)
        return fileDirs, fileNames
    

### Parameters: infileName, the name of the .pdb file to be converted
###
### Returns: outfileName, the name of the temp file with no repeating sequence nums
###
### Purpose: changes the loc numbers of the amino acids if there is overlap
def pre_check(infileName):
    infile = open(infileName, 'r')
    outfileName = infileName.rstrip('.pdb') + "_tempfile.pdb"
    outfile = open(outfileName, 'w')
    prevNum = 'ABC'
    cnt = 0
    for line in infile:
        if line.startswith('ATOM'):
            num = line[23:26]
            if num != prevNum:
                cnt += 1
                if cnt < 10:
                    fixedNum = "  " + str(cnt)
                elif cnt >= 10 and cnt < 100:
                    fixedNum = " " + str(cnt)
                else:
                    fixedNum = str(cnt)
            prevNum = num
            outfile.write(line[:23])
            outfile.write(fixedNum)
            outfile.write(line[26:])
            outfile.write('\n')

    outfile.close()
    return outfileName
            
    
### Parameters: infileName, name of the .pdb file to be converted
###
### Returns: aminoList, a dictionary of the amino acids matched with their loc number
### largest, the largest loc number
###
### Purpose: creates a dictionary to be used in creating the file header
def make_amino_list(infileName):
    infile = open(infileName,'r')
    aminoList = {}
    largest = 0
    for line in infile:
        if line.startswith('ATOM'):
            loc = line[22:26]
            loc = loc.lstrip()
            loc = int(loc)
            aminoAcid = line[17:20]
            if loc > largest:
                largest = loc
            if loc not in aminoList:
                aminoList[loc] = aminoAcid        
    infile.close()
    return aminoList,largest

##Epitopia Prep

### Parameters: outfile, the file to be submitted to Epitopia
### aminoList, a dictionary containing all unique AA/loc numbers from original .pdb
### largest, largest loc number in original .pdb
###
### Returns: None
###
### Purpose: writes the file header required by Epitopia
def write_seqres(outfile,aminoList,largest):
    k = 1
    if largest % 13 == 0:
        numRows = largest // 13
    else:
        numRows = (largest // 13) + 1
    if largest < 10:
        spacer = "    "
    elif largest > 9 and largest < 100:
        spacer = '   '
    elif largest > 99 and largest < 1000:
        spacer = '  '
    if largest > 999:
        spacer = ' '
    for i in range(1,numRows+1,1):
        multiplier = (i - 1) * 13
        if i < 10:
            header = "SEQRES   " + str(i) + " A" + spacer + str(largest) + "  "
        elif i >= 10 and i < 100:
            header = "SEQRES  " + str(i) + " A" + spacer + str(largest) + "  "
        else:
            header = "SEQRES " + str(i) + " A" + spacer + str(largest) + "  "
        outfile.write(header)
        for k in range(1,14,1):
            loc = k + multiplier
            if loc in aminoList:
                amino = aminoList[loc]
                outfile.write(amino)
                outfile.write(' ')
        outfile.write('\n')
            

### Parameters: outfile, the file to be submitted to epitopia
### infileName, the name of the file that is the original .pdb (or pre-checked file, if
### appropriate)
###
### Returns: none
###
### Purpose: writes the rest of the original .pdb
def write_bulk(outfile,infileName):
    infile = open(infileName,'r')
    for line in infile:
        if line.startswith('ATOM') or line.startswith('END'):
            outfile.write(line)



##Prepare files to be run in Rosie 
def matchChain(line,chain):
    if line[21] == chain:
        return True
    else:
        return False

    
def writeRecChains(recChains,infile,outfile):
    for item in recChains:
        for line in infile:
            if line.startswith('ATOM') and matchChain(line,item):
                    outfile.write(line[:55])
                    outfile.write('\n')
        infile.seek(0)
    outfile.write('TER\n')


def writeBindChains(bindChain,infile,outfile):
    for line in infile:
        if line.startswith('ATOM') and matchChain(line,bindChain):
            outfile.write(line[:55])
            outfile.write('\n')
    infile.seek(0)
    outfile.write('TER\n')


def enterChains():
    numRecChains = int(input("Enter number of receptor chains: "))
    print('Enter chain names one at a time, sepearated by hitting "enter"')
    recChains = []
    for i in range(0,numRecChains,1):
        chainName = input('Enter chain name: ')
        recChains.append(chainName)
    return recChains
